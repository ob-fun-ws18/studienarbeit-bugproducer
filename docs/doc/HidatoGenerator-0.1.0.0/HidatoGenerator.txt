-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/HidatoGenerator#readme</a>
@package HidatoGenerator
@version 0.1.0.0

module Lib
data Playground
Playground :: Matrix Int -> Matrix Int -> Field -> Field -> Int -> Bool -> Playground

-- | Matrix used for filling and playing.
[normalMatrix] :: Playground -> Matrix Int

-- | Matrix used to validate the Solution.
[controlMatrix] :: Playground -> Matrix Int

-- | Field that was most recently used.
[field] :: Playground -> Field

-- | The Starting Field of the Game.
[startField] :: Playground -> Field

-- | Size of the Playground.
[size] :: Playground -> Int

-- | Indicates if the last checked solution is correct.
[solved] :: Playground -> Bool
data Field
Field :: Int -> (Int, Int) -> Field

-- | Value of the field.
[val] :: Field -> Int

-- | Position of the field.
[pos] :: Field -> (Int, Int)

-- | Getter for the matrix of the playground.
getMatrix :: Playground -> Matrix Int

-- | Getter for the control matrix of the playground.
getControlMatrix :: Playground -> Matrix Int

-- | Getter for the field of the playground.
getField :: Playground -> Field

-- | Getter for the start field of the playground.
getStartField :: Playground -> Field

-- | Getter for the size of the playground.
getSize :: Playground -> Int

-- | Getter for the solved status of the playground.
getStatus :: Playground -> Bool

-- | Getter for the value of the field.
getValue :: Field -> Int

-- | Getter for the position of the field.
getPosition :: Field -> (Int, Int)

-- | Creates a zero Matrix.
generateEmptyMatrix :: Int -> Matrix Int

-- | Sets the start point.
setStartPoint :: Matrix Int -> (Int, Int) -> Int -> Playground

-- | Calculates the neighbours of the given position with a 0 value.
calcNeighbours :: Matrix Int -> (Int, Int) -> Int -> [Field]

-- | Calculates if there is a valid upper neighbour.
upperNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Calculates if there is a valid lower neighbour.
lowerNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Calculates if there is a valid left neighbour.
leftNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Calculates if there is a valid right neighbour.
rightNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Calculates if there is a valid upper left neighbour.
upperLeftNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Calculates if there is a valid upper right neighbour.
upperRightNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Calculates if there is a valid lower left neighbour.
lowerLeftNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Calculates if there is a valid lower right neighbour.
lowerRightNeighbour :: Matrix Int -> (Int, Int) -> Int -> Field

-- | Sets the next point into the playground. Uses a shuffle function to
--   randomise the position of the field.
setPoint :: Playground -> Int -> IO Playground

-- | Used for checking if there a is neighbour nearby.
decider :: Playground -> Matrix Int -> Field -> [Field] -> Playground

-- | Function used to shuffle a given list.
shuffleList :: [a] -> IO [a]

-- | Shuffles a list and returns the first value.
returnFieldFromNeighbours :: [a] -> IO a

-- | Used to initiate the playground and fill it.
buildPlayground :: Int -> IO Playground

-- | Used for entering all points into the playground.
setPoints :: Playground -> [Int] -> IO Playground

-- | Builds a playground and checks if it fits the wanted fill rate.
generatePlayground :: Int -> IO Playground

-- | Calculates the percentages of empty to filled fields of a matrix.
zeroRate :: Matrix Int -> Float

-- | Takes a playground with all set points and removes some of them, so
--   that the playground is ready for playing.
generatePlaygroundToPlayOn :: Playground -> IO Playground

-- | Used for handling the input from the user and checks if game
--   finished(gameloop).
gameHandler :: Playground -> IO ()

-- | Handles the input from the user and calls different functions
--   depending on the input.
handler :: Playground -> String -> Playground

-- | Function to enter a value into the playgroung. Checks if Position is
--   valid, so no given values are overwritten.
enterValue :: Playground -> Int -> (Int, Int) -> Playground

-- | Function used for validating the solution from the user.
checkSolution :: Playground -> Field -> Playground

-- | Calculates if there is the correct neighbour nearby to the given
--   field.
calcSolutionNeighbours :: Matrix Int -> Field -> Int -> [Field]
instance GHC.Show.Show Lib.Playground
instance GHC.Classes.Eq Lib.Playground
instance GHC.Show.Show Lib.Field
instance GHC.Classes.Eq Lib.Field
